#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 7.2 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 75 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 2 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 150 0 150 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 175 0 0
0 -1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 70 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 148 0 211 0
0 0 -1 -1 2 1 #"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
0.0 12 -1 -1 -1 -1 -1 -1 0 0 1 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
0.0 12 -1 -1 -1 -1 -1 -1 0 0 1 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 65 105 225 0 0 0
-1 -1 17 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
24 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
15 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
44 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
46 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
          0 753 0 4 3 85
(
 #";; The first three lines of this file were inserted by DrRacket. The"
 #"y record metadata"
) 0 0 4 29 1 #"\n"
0 0 4 3 85
(
 #";; about the language level of this file in a form that our tools ca"
 #"n easily process."
) 0 0 4 29 1 #"\n"
0 0 4 3 135
(
 #"#reader(lib \"htdp-intermediate-lambda-reader.ss\" \"lang\")((modnam"
 #"e DesigningWorldPrograms) (read-case-sensitive #t) (teachpacks ((lib"
 #" \"i"
) 0 0 4 3 306
(
 #"mage.rkt\" \"teachpack\" \"2htdp\") (lib \"universe.rkt\" \"teachpac"
 #"k\" \"2htdp\") (lib \"batch-io.rkt\" \"teachpack\" \"2htdp\"))) (htd"
 #"p-settings #(#t constructor repeating-decimal #f #t none #f ((lib \""
 #"image.rkt\" \"teachpack\" \"2htdp\") (lib \"universe.rkt\" \"teachpa"
 #"ck\" \"2htdp\") (lib \"batch-io.rkt\" \"teachpack\" \"2htdp\")) #f))"
 #")"
) 0 0 4 29 1 #"\n"
0 0 17 3 59
#"; Design a program that moves a car from left to right on a"
0 0 24 29 1 #"\n"
0 0 17 3 34 #"; canvas, one pixel per clock tick"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 66
(
 #"; 1) Define constants for the Wo"
 #"rld (e.g. \"physical\", \"graphical\")"
) 0 0 24 29 1 #"\n"
0 0 17 3 64
#"; 2) Develop a data representation for all possible World states"
0 0 24 29 1 #"\n"
0 0 17 3 46 #"; (this can be a data definition of the World)"
0 0 24 29 1 #"\n"
0 0 17 3 59
#"; 3) Create functions that can render states as images, and"
0 0 24 29 1 #"\n"
0 0 17 3 15 #"; end the world"
0 0 24 29 1 #"\n"
0 0 17 3 42 #";   a) get current state (State -> Image),"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";   b) set next state based on current state (State -> State)"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";   c) end when... (State -> Boolean)"
0 0 24 29 1 #"\n"
0 0 17 3 51 #";   d) keyboard callback (State, keyEvent -> State)"
0 0 24 29 1 #"\n"
0 0 17 3 66
#";   e) mouse callback (State, mouseX, mouseY, mouseEvent -> State)"
0 0 24 29 1 #"\n"
0 0 17 3 62
#"; 4) Create a main function that takes in input args necessary"
0 0 24 29 1 #"\n"
0 0 17 3 28 #"; to start running the world"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 4 #"; 1)"
0 0 24 29 1 #"\n"
0 0 17 3 22 #"; \"physical\" constants"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"WORLD-WIDTH"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"WORLD-HEIGHT"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"WHEEL-RADIUS"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"WHEEL-DISTANCE"
0 0 24 3 2 #" ("
0 0 14 3 3 #"sqr"
0 0 24 3 1 #" "
0 0 14 3 12 #"WHEEL-RADIUS"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 23 #"; \"graphical\" constants"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"BACKGROUND"
0 0 24 3 2 #" ("
0 0 14 3 11 #"empty-scene"
0 0 24 3 1 #" "
0 0 14 3 11 #"WORLD-WIDTH"
0 0 24 3 1 #" "
0 0 14 3 12 #"WORLD-HEIGHT"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"WHEEL"
0 0 24 3 2 #" ("
0 0 14 3 6 #"circle"
0 0 24 3 1 #" "
0 0 14 3 12 #"WHEEL-RADIUS"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"black\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 30 #"; the space between the wheels"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"SPACE"
0 0 24 3 2 #" ("
0 0 14 3 9 #"rectangle"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 3 #"1.5"
0 0 24 3 1 #" "
0 0 14 3 12 #"WHEEL-RADIUS"
0 0 24 3 2 #") "
0 0 14 3 12 #"WHEEL-RADIUS"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                        "
0 0 19 3 9 #"\"outline\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"white\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 72
(
 #"; width of BOTH-WHEELS is (* 5.5 WHEEL-RADIUS) {2 WHEEL(4) + SPACE(1"
 #".5)}"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"BOTH-WHEELS"
0 0 24 3 2 #" ("
0 0 14 3 6 #"beside"
0 0 24 3 1 #" "
0 0 14 3 5 #"WHEEL"
0 0 24 3 1 #" "
0 0 14 3 5 #"SPACE"
0 0 24 3 1 #" "
0 0 14 3 5 #"WHEEL"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"CAR-BODY"
0 0 24 3 2 #" ("
0 0 14 3 9 #"rectangle"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 3 #"7.5"
0 0 24 3 1 #" "
0 0 14 3 12 #"WHEEL-RADIUS"
0 0 24 3 3 #") ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 14 3 12 #"WHEEL-RADIUS"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                            "
0 0 19 3 7 #"\"solid\""
0 0 24 3 1 #" "
0 0 19 3 5 #"\"red\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 40 #"; place a tree behind \"CAR\" in the scene"
0 0 24 29 1 #"\n"
0 0 17 3 51 #"; width,height of CAR-BODY BOTH-WHEELS currently is"
0 0 24 29 1 #"\n"
0 0 17 3 42 #"; (* 7.5 WHEEL-RADIUS), (* 5 WHEEL-RADIUS)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"TREE"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 5 #"above"
0 0 24 3 2 #" ("
0 0 14 3 6 #"circle"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 14 3 12 #"WHEEL-RADIUS"
0 0 24 3 2 #") "
0 0 19 3 7 #"\"solid\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"green\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 9 #"rectangle"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 14 3 12 #"WHEEL-RADIUS"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"brown\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 8 #"; have \""
0 0 17 3 35 #"CAR\" drag \"TREE\" through the scene "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 3 #"CAR"
0 0 24 3 2 #" ("
0 0 14 3 6 #"beside"
0 0 24 3 1 #" "
0 0 14 3 4 #"TREE"
0 0 24 3 2 #" ("
0 0 14 3 5 #"above"
0 0 24 3 1 #" "
0 0 14 3 8 #"CAR-BODY"
0 0 24 3 1 #" "
0 0 14 3 11 #"BOTH-WHEELS"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 17 3 67
(
 #"; y-position of car {a y-position of \"WORLD-HEIGHT\" would be at th"
 #"e"
) 0 0 24 29 1 #"\n"
0 0 17 3 13 #"; bottom of \""
0 0 17 3 12 #"BACKGROUND\"}"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"CAR-Y"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 12 #"WORLD-HEIGHT"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 2 #" ("
0 0 14 3 12 #"image-height"
0 0 24 3 1 #" "
0 0 14 3 3 #"CAR"
0 0 24 3 2 #") "
0 0 21 3 1 #"2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 4 #"; 2)"
0 0 24 29 1 #"\n"
0 0 17 3 5 #"; A \""
0 0 17 3 57
#"State\" is a Number: the number of pixels between the left"
0 0 24 29 1 #"\n"
0 0 17 3 33 #"; border of the scene and the car"
0 0 24 29 1 #"\n"
0 0 17 3 62
#"; (We could have also chosen as State e.g. the number of clock"
0 0 24 29 1 #"\n"
0 0 17 3 8 #"; ticks)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 4 #"; 3)"
0 0 24 29 1 #"\n"
0 0 17 3 25 #"; a) get image from state"
0 0 24 29 1 #"\n"
0 0 17 3 3 #"; \""
0 0 17 3 68
(
 #"renderCar\" initializes the placement of the car, 'x' pixels from th"
 #"e"
) 0 0 24 29 1 #"\n"
0 0 17 3 27 #"; left margin of the canvas"
0 0 24 29 1 #"\n"
0 0 17 3 16 #"; State -> Image"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"renderCar"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"place-image"
0 0 24 3 1 #" "
0 0 14 3 3 #"CAR"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 5 #"CAR-Y"
0 0 24 3 1 #" "
0 0 14 3 10 #"BACKGROUND"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 15 #"; b) next state"
0 0 24 29 1 #"\n"
0 0 17 3 3 #"; \""
0 0 17 3 58
#"moveCar\" moves the car to the right by 1 pixels (from 'x')"
0 0 24 29 1 #"\n"
0 0 17 3 17 #"; each clock tick"
0 0 24 29 1 #"\n"
0 0 17 3 16 #"; State -> State"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"moveCar"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #"; c) end world"
0 0 24 29 1 #"\n"
0 0 17 3 3 #"; \""
0 0 17 3 4 #"end?"
0 0 17 3 33 #"\" ends the world when the state \""
0 0 17 3 30 #"x\" is greater than the world's"
0 0 24 29 1 #"\n"
0 0 17 3 64
#"; width + half the width of the car (i.e. when the car exits the"
0 0 24 29 1 #"\n"
0 0 17 3 26 #"; background to the right)"
0 0 24 29 1 #"\n"
0 0 17 3 18 #"; State -> Boolean"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 4 #"end?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 2 #">="
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 11 #"WORLD-WIDTH"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 2 #" ("
0 0 14 3 11 #"image-width"
0 0 24 3 1 #" "
0 0 14 3 3 #"CAR"
0 0 24 3 2 #") "
0 0 21 3 1 #"2"
0 0 24 3 4 #"))) "
0 0 14 3 4 #"true"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 14 3 5 #"false"
0 0 24 3 3 #"]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 19 #"; d) mouse callback"
0 0 24 29 1 #"\n"
0 0 17 3 3 #"; \""
0 0 17 3 67
#"reset\" resets the car to the initial x-position, which is where the"
0 0 24 29 1 #"\n"
0 0 17 3 61
#"; left edge of the car is at x = 0, when the mouse is clicked"
0 0 24 29 1 #"\n"
0 0 17 3 41 #"; State mouseX mouseY mouseEvent -> State"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 5 #"reset"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 6 #"mouseX"
0 0 24 3 1 #" "
0 0 14 3 6 #"mouseY"
0 0 24 3 1 #" "
0 0 14 3 10 #"mouseEvent"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 10 #"mouseEvent"
0 0 24 3 1 #" "
0 0 19 3 12 #"\"button-down"
0 0 19 3 1 #"\""
0 0 24 3 3 #") ("
0 0 14 3 1 #"/"
0 0 24 3 2 #" ("
0 0 14 3 11 #"image-width"
0 0 24 3 1 #" "
0 0 14 3 8 #"CAR-BODY"
0 0 24 3 2 #") "
0 0 21 3 1 #"2"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 4 #"])) "
0 0 17 3 33 #"; else just return the same state"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 22 #"; e) keyboard callback"
0 0 24 29 1 #"\n"
0 0 17 3 3 #"; \""
0 0 17 3 6 #"endKey"
0 0 17 3 48 #"\" ends the world by changing the state so that \""
0 0 17 3 5 #"end?\""
0 0 24 29 1 #"\n"
0 0 17 3 50 #"; returns true when the right arrow key is pressed"
0 0 24 29 1 #"\n"
0 0 17 3 25 #"; State keyEvent -> State"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"endKey"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 8 #"keyEvent"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 8 #"keyEvent"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"right"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 11 #"WORLD-WIDTH"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 2 #" ("
0 0 14 3 11 #"image-width"
0 0 24 3 1 #" "
0 0 14 3 8 #"CAR-BODY"
0 0 24 3 2 #") "
0 0 21 3 1 #"2"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 4 #"])) "
0 0 17 3 33 #"; else just return the same state"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 4 #"; 4)"
0 0 24 29 1 #"\n"
0 0 17 3 3 #"; \""
0 0 17 3 50 #"main\" launches the program, given an initial state"
0 0 24 29 1 #"\n"
0 0 17 3 16 #"; State -> State"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 4 #"main"
0 0 24 3 1 #" "
0 0 14 3 9 #"initState"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 8 #"big-bang"
0 0 24 3 1 #" "
0 0 14 3 9 #"initState"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 7 #"on-tick"
0 0 24 3 1 #" "
0 0 14 3 7 #"moveCar"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 7 #"to-draw"
0 0 24 3 1 #" "
0 0 14 3 9 #"renderCar"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 8 #"on-mouse"
0 0 24 3 1 #" "
0 0 14 3 5 #"reset"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 6 #"on-key"
0 0 24 3 1 #" "
0 0 14 3 6 #"endKey"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 9 #"stop-when"
0 0 24 3 1 #" "
0 0 14 3 4 #"end?"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 19 #"; Examples/Testing:"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 11 #"; renderCar"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 15 #"; initial state"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 9 #"renderCar"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 2 #" ("
0 0 14 3 11 #"image-width"
0 0 24 3 1 #" "
0 0 14 3 3 #"CAR"
0 0 24 3 2 #") "
0 0 21 3 1 #"2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 6           4 21 1947
(
 #"(#(struct:crop (#(struct:point 0 0) #(struct:point 100 0) #(struct:p"
 #"oint 100 100) #(struct:point 0 100)) #(struct:translate 0 0 #(struct"
 #":overlay #(struct:translate 1/4 75 #(struct:overlay #(struct:transla"
 #"te 0 0 #(struct:overlay #(struct:translate 0 0 #(struct:translate 10"
 #" 10 #(struct:ellipse 20 20 0 255 \"green\"))) #(struct:translate 17/"
 #"2 20 #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point "
 #"0 0 0 0 0 0) #(struct:pulled-point 0 0 3 0 0 0) #(struct:pulled-poin"
 #"t 0 0 3 5 0 0) #(struct:pulled-point 0 0 0 5 0 0)) 255 \"brown\"))))"
 #") #(struct:translate 20 0 #(struct:overlay #(struct:translate 0 0 #("
 #"struct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0"
 #" 0 0) #(struct:pulled-point 0 0 75/2 0 0 0) #(struct:pulled-point 0 "
 #"0 75/2 15 0 0) #(struct:pulled-point 0 0 0 15 0 0)) 255 \"red\"))) #"
 #"(struct:translate 5 15 #(struct:overlay #(struct:translate 0 0 #(str"
 #"uct:overlay #(struct:translate 0 0 #0=#(struct:translate 5 5 #(struc"
 #"t:ellipse 10 10 0 255 \"black\"))) #(struct:translate 10 5/2 #(struc"
 #"t:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0)"
 #" #(struct:pulled-point 0 0 15/2 0 0 0) #(struct:pulled-point 0 0 15/"
 #"2 5 0 0) #(struct:pulled-point 0 0 0 5 0 0)) outline \"white\"))))) "
 #"#(struct:translate 35/2 0 #0#))))))) #(struct:translate 0 0 #(struct"
 #":crop (#(struct:point 0 0) #(struct:point 100 0) #(struct:point 100 "
 #"100) #(struct:point 0 100)) #(struct:translate 0 0 #(struct:overlay "
 #"#(struct:translate 0 0 #(struct:translate 0 0 #(struct:polygon (#(st"
 #"ruct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 100 0 0 0) "
 #"#(struct:pulled-point 0 0 100 100 0 0) #(struct:pulled-point 0 0 0 1"
 #"00 0 0)) outline #(struct:pen \"black\" 2 solid round round)))) #(st"
 #"ruct:translate 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct"
 #":pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 100 0 0 0) #(st"
 #"ruct:pulled-point 0 0 100 100 0 0) #(struct:pulled-point 0 0 0 100 0"
 #" 0)) 255 \"white\")))))))))) #(struct:bb 100 100 100) #f)"
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 14 #"; ending state"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 9 #"renderCar"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 11 #"WORLD-WIDTH"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 2 #" ("
0 0 14 3 11 #"image-width"
0 0 24 3 1 #" "
0 0 14 3 3 #"CAR"
0 0 24 3 2 #") "
0 0 21 3 1 #"2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 6           4 21 1951
(
 #"(#(struct:crop (#(struct:point 0 0) #(struct:point 100 0) #(struct:p"
 #"oint 100 100) #(struct:point 0 100)) #(struct:translate 0 0 #(struct"
 #":overlay #(struct:translate 401/4 135/2 #(struct:overlay #(struct:tr"
 #"anslate 0 0 #(struct:overlay #(struct:translate 9 15 #(struct:transl"
 #"ate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struc"
 #"t:pulled-point 0 0 2 0 0 0) #(struct:pulled-point 0 0 2 20 0 0) #(st"
 #"ruct:pulled-point 0 0 0 20 0 0)) 255 \"brown\"))) #(struct:translate"
 #" 0 0 #(struct:translate 10 10 #(struct:ellipse 20 20 0 255 \"green\""
 #"))))) #(struct:translate 20 5 #(struct:overlay #(struct:translate 0 "
 #"0 #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0"
 #" 0 0 0 0) #(struct:pulled-point 0 0 75/2 0 0 0) #(struct:pulled-poin"
 #"t 0 0 75/2 15 0 0) #(struct:pulled-point 0 0 0 15 0 0)) 255 \"red\")"
 #")) #(struct:translate 5 15 #(struct:overlay #(struct:translate 0 0 #"
 #"(struct:overlay #(struct:translate 0 0 #0=#(struct:translate 5 5 #(s"
 #"truct:ellipse 10 10 0 255 \"black\"))) #(struct:translate 10 5/2 #(s"
 #"truct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 "
 #"0 0) #(struct:pulled-point 0 0 15/2 0 0 0) #(struct:pulled-point 0 0"
 #" 15/2 5 0 0) #(struct:pulled-point 0 0 0 5 0 0)) outline \"white\"))"
 #"))) #(struct:translate 35/2 0 #0#))))))) #(struct:translate 0 0 #(st"
 #"ruct:crop (#(struct:point 0 0) #(struct:point 100 0) #(struct:point "
 #"100 100) #(struct:point 0 100)) #(struct:translate 0 0 #(struct:over"
 #"lay #(struct:translate 0 0 #(struct:translate 0 0 #(struct:polygon ("
 #"#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 100 0 0"
 #" 0) #(struct:pulled-point 0 0 100 100 0 0) #(struct:pulled-point 0 0"
 #" 0 100 0 0)) outline #(struct:pen \"black\" 2 solid round round)))) "
 #"#(struct:translate 0 0 #(struct:translate 0 0 #(struct:polygon (#(st"
 #"ruct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 100 0 0 0) "
 #"#(struct:pulled-point 0 0 100 100 0 0) #(struct:pulled-point 0 0 0 1"
 #"00 0 0)) 255 \"white\")))))))))) #(struct:bb 100 100 100) #f)"
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 9 #"; moveCar"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 7 #"moveCar"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 6 #"; end?"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 23 #"; when world should end"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 4 #"end?"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 11 #"WORLD-WIDTH"
0 0 24 3 2 #" ("
0 0 14 3 11 #"image-width"
0 0 24 3 1 #" "
0 0 14 3 8 #"CAR-BODY"
0 0 24 3 4 #"))) "
0 0 14 3 4 #"true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 25 #"; before world should end"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 4 #"end?"
0 0 24 3 1 #" "
0 0 14 3 11 #"WORLD-WIDTH"
0 0 24 3 2 #") "
0 0 14 3 5 #"false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 7 #"; reset"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 16 #"; on mouse-click"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 5 #"reset"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 19 3 13 #"\"button-down\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 1 #"/"
0 0 24 3 2 #" ("
0 0 14 3 11 #"image-width"
0 0 24 3 1 #" "
0 0 14 3 8 #"CAR-BODY"
0 0 24 3 2 #") "
0 0 21 3 1 #"2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 15 #"; on mouse-move"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 5 #"reset"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"move\""
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 8 #"; endKey"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 20 #"; on right-key press"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 6 #"endKey"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"right\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 11 #"WORLD-WIDTH"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 2 #" ("
0 0 14 3 11 #"image-width"
0 0 24 3 1 #" "
0 0 14 3 8 #"CAR-BODY"
0 0 24 3 2 #") "
0 0 21 3 1 #"2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 19 #"; on left-key press"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 6 #"endKey"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"left\""
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 6 #"; main"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 68
#"; here we start with an x-position that allows full visualization of"
0 0 24 29 1 #"\n"
0 0 17 3 7 #"; \"CAR\""
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"main"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 2 #" ("
0 0 14 3 11 #"image-width"
0 0 24 3 1 #" "
0 0 14 3 8 #"CAR-BODY"
0 0 24 3 2 #") "
0 0 21 3 1 #"2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0           0
